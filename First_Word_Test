# Packages needed
from statistics import mean
from colorama import Fore
import requests
from random import sample

def initialize():
    global words, all_words, possible_words, possible_words_scored, possible_words_refined, import_answers, possible_answers, answer
    global best_initial_words, letter_one, letter_two, letter_three, letter_four, letter_five
    global letter_one_score, letter_two_score, letter_three_score, letter_four_score, letter_five_score
    global letter_one_score_ranked, letter_two_score_ranked, letter_three_score_ranked, letter_four_score_ranked, letter_five_score_ranked
    global list_letter, list_score, dict_letters_score, color_list, guess, possible_words_list
    # Variables to instantiate
    # all words lists
    words = []
    all_words = {"words": []}
        # Discard words off possible words and reset possible_words at new game
    possible_words = set()
    possible_words_list = []
        # Assign possible word scores to this list - list should be reset after each guess
    possible_words_scored = []
        # Assign words scored in ranked order without rank - should be reset after each guess
    possible_words_refined = []
    # All answers lists
        # list of all answers from csv
    import_answers = []    
        # takes words out of import answers into a good list
    possible_answers = []
        # sample of a single answer from possible_answers
    answer = []
    # score best initial words because they won't change after open
    best_initial_words = []
    # guess instantiation
    guess = []
        # create letter dictonaries (positional)
    letter_one = []
    letter_two = []
    letter_three = []
    letter_four = []
    letter_five = []
        # create lists to hold the letter with count combined
    letter_one_score = []
    letter_two_score = []
    letter_three_score = []
    letter_four_score = []
    letter_five_score = []
        # create dict for letter (key) and score (value)
    letter_one_score_ranked = {}
    letter_two_score_ranked = {}
    letter_three_score_ranked = {}
    letter_four_score_ranked = {}
    letter_five_score_ranked = {}
        # List of lists to itterate through when ranking values
            # List for all letters in positions of words
    list_letter = ["letter_one", "letter_two", "letter_three", "letter_four", "letter_five"]
            # List of all letters scored (duplicates)
    list_score = ["letter_one_score", "letter_two_score", "letter_three_score", "letter_four_score", "letter_five_score"]
            # Dictonary of letters (key) and score (value)
    dict_letters_score = ["letter_one_score_ranked", "letter_two_score_ranked", "letter_three_score_ranked", "letter_four_score_ranked", "letter_five_score_ranked"]
    # Color list for print out of guess letters
    color_list = [Fore.WHITE, Fore.WHITE, Fore.WHITE, Fore.WHITE, Fore.WHITE]
    # Read in possible word list and answer list
    word_url = "https://raw.githubusercontent.com/nrsundberg/Nerdle/master/words_dictonary.csv"
    answer_url = "https://raw.githubusercontent.com/nrsundberg/Nerdle/master/answers.csv"
    download_word = requests.get(word_url).text
    words = download_word.split(',')
    words[12973] = words[12973][:-1]
    all_words["words"] = words
    index_FALSE = all_words["words"].index("FALSE")
    all_words["words"][index_FALSE] = "false"
    download_answer = requests.get(answer_url).text
    possible_answers = download_answer.split(',')
    possible_answers[2308] = possible_answers[2308][:-1]

    # Ranking function used to get the score of a letter
def get_letter_rank(letter):
    rank = float(letter[:-2])
    return rank

# Ranking function used to get the score of a word
def get_word_rank(word):
    rank = float(word[:-6])
    return rank

# Function to generate new_answer and separate it into a list of five letters - could use [*answer] 
    # but the sample function is generating an interesting str so the [*answer] isnt working
def new_answer():
    global answer
    answer = sample(possible_answers , k= 1)
    for word in answer.copy():
        answer = []
        for letter in word:
            answer.append(letter)

# Function to take words from a given word_list and separate each positional letter and assign them to letter_lists
def separate_letters_from_words():
    # letter_lists cleared out to be appended to
    for lists in list_letter:
        globals()[lists] = []
    # separating each letter for each word in word_list
    for word in possible_words["words"]:
        letter_index = 0
        for letter in word:
            globals()[list_letter[letter_index]].append(letter)
            letter_index += 1

# Function to append a frequency score to the letter and put the score in a dictionary 
def rank_letters_word_frequency():
    list_index = 0
    for lists in list_score:
        # list(set()) removes all duplicates in letter list so only 26 letters or less will be counted per list and back to list so it can be sorted
        globals()[lists] = list(set(globals()[list_letter[list_index]]))
        for letter in globals()[lists]:
            # Count funciton to assign score to dictonary
            globals()[dict_letters_score[list_index]][letter] = globals()[list_letter[list_index]].count(letter)
        list_index += 1

def rank_words():
    global possible_words_scored, possible_words_refined
    possible_words_scored = []
    possible_words_refined = []
    for word in possible_words["words"]:
        word_score = []
        letter_index = 0
        for letter in word:
            word_score.append(globals()[dict_letters_score[letter_index]][letter])
            if letter_index == 4:
                total_score = sum(word_score)
                possible_words_scored.append(f"{total_score}.{word}")
            letter_index += 1
    possible_words_scored.sort(key= get_word_rank, reverse= True)
    for word in possible_words_scored:
        possible_words_refined.append(word[len(word)-5:])

def print_rank_words():
    total_words = len(possible_words_refined)
    print(f"Total words left: {total_words}")
    if total_words < 10:
        print(possible_words_refined)
    else:
        print("Word suggestions:\n", possible_words_refined[0:5])

def call_guess_with_question():
    global guess
    guess = input("Please guess a word ")
    while guess not in all_words["words"]:
        guess = input(Fore.RED + "Please guess a valid 5-letter word " + Fore.RESET)
    guess = [*guess]

# Function assiging colors to output of guess - decided to separate this from any interpretation because the user can guess any word at anytime 
def game_without_letters_filter():
    letter_index = 0
    for letter in guess:
        if letter == answer[letter_index]:
            color_list[letter_index] = Fore.GREEN
            letter_index += 1
        elif letter in answer and guess[:letter_index + 1].count(letter) <= answer.count(letter):
            color_list[letter_index] = Fore.YELLOW
            letter_index += 1
        else:
            color_list[letter_index] = Fore.BLACK
            letter_index += 1
    print(color_list[0] + guess[0] + color_list[1] + guess[1] + color_list[2] + guess[2] + color_list[3] + guess[3] + color_list[4] + guess[4] + Fore.RESET)

def refine_guess():
    global letters_in_position, combined_possibilities, non_letters, letters_not_in_position
    letter_index = 0
    for letter in guess:
        if letter == answer[letter_index]:
            if letter in letters_in_position:
                letters_in_position[letter].append(letter_index) 
            else:
                letters_in_position[letter] = [letter_index]
            letter_index += 1
        elif letter in answer:
            if letter in letters_not_in_position:
                letters_not_in_position[letter].append(letter_index) 
            else:
                letters_not_in_position[letter] = [letter_index]
            letter_index += 1
        else:
            non_letters.append(letter)
            letter_index += 1
    if len(letters_in_position) != 0:
        for key in letters_in_position.copy():
            values = list(set(letters_in_position[key]))
            letters_in_position[key] = values
    if len(letters_not_in_position) != 0: 
        for key in letters_not_in_position.copy():
            values = list(set(letters_not_in_position[key]))
            letters_not_in_position[key] = values
    list1 = [i for i in letters_in_position]
    list2 = [i for i in letters_not_in_position]
    combined_possibilities = combined_possibilities + list1 +list2

def possible_words_refine():
    global possible_words, possible_words_list
    for word in possible_words_list.copy():
        for letter in non_letters:
            if letter in word:
                possible_words.discard(word)
                break
    possible_words_list = possible_words
    for word in possible_words_list.copy(): 
        for letter in combined_possibilities:
            if letter not in word:
                possible_words.discard(word)
                break
    possible_words_list = possible_words
    for word in possible_words_list.copy():
        for letter, positions in letters_not_in_position.items():
            for position in positions:
                if letter == word[position]:
                    possible_words.discard(word)
                    break
    possible_words_list = possible_words
    for word in possible_words_list.copy():
        for letter, positions in letters_in_position.items():
            for position in positions:
                if letter != word[position]:
                    possible_words.discard(word)
                    break
    possible_words_list = possible_words

def possible_words_refine_new():
    global possible_words, possible_words_list
    for word in possible_words_list.copy():
        for letter, position_list in letters_not_in_position.items():
            if any(letter == word[position] for position in position_list):
                possible_words["words"].discard(word)
                break
    possible_words_list = possible_words["words"]
    for word in possible_words_list.copy():
        for letter, position_list in letters_in_position.items():
            if any(letter != word[position] for position in position_list):
                possible_words["words"].discard(word)
                break
    possible_words_list = possible_words["words"]
    for word in possible_words_list.copy():
        if any(letter not in word for letter in combined_possibilities):
            possible_words["words"].discard(word) 
            continue
    possible_words_list = possible_words["words"]
    for word in possible_words_list.copy():
        if any(letter in word for letter in non_letters):
            possible_words["words"].discard(word)
            continue
    possible_words_list = possible_words["words"]

# Function to take words from a given word_list and separate each positional letter and assign them to letter_lists
def separate_letters_from_words():
    # letter_lists cleared out to be appended to
    for lists in list_letter:
        globals()[lists] = []
    # separating each letter for each word in word_list
    for word in possible_words:
        letter_index = 0
        for letter in word:
            globals()[list_letter[letter_index]].append(letter)
            letter_index += 1

# Function to append a frequency score to the letter and put the score in a dictionary 
def rank_letters_word_frequency():
    list_index = 0
    for lists in list_score:
        # list(set()) removes all duplicates in letter list so only 26 letters or less will be counted per list and back to list so it can be sorted
        globals()[lists] = list(set(globals()[list_letter[list_index]]))
        for letter in globals()[lists]:
            # Count funciton to assign score to dictonary
            globals()[dict_letters_score[list_index]][letter] = globals()[list_letter[list_index]].count(letter)
        list_index += 1

def rank_words():
    global possible_words_scored, possible_words_refined
    possible_words_scored = []
    possible_words_refined = []
    for word in possible_words:
        word_score = []
        letter_index = 0
        for letter in word:
            word_score.append(globals()[dict_letters_score[letter_index]][letter])
            if letter_index == 4:
                total_score = sum(word_score)
                possible_words_scored.append(f"{total_score}.{word}")
            letter_index += 1
    possible_words_scored.sort(key= get_word_rank, reverse= True)
    for word in possible_words_scored:
        possible_words_refined.append(word[len(word)-5:])

def print_rank_words():
    total_words = len(possible_words_refined)
    print(f"Total words left: {total_words}")
    if total_words < 10:
        print(possible_words_refined)
    else:
        print("Word suggestions:\n", possible_words_refined[0:5])

def call_guess_without_question():
    global guess
    guess = input("")
    while guess not in all_words["words"]:
        guess = input("")
    guess = [*guess]

def reset():
    global possible_words, non_letters, combined_possibilities, letters_in_position, letters_not_in_position, possible_words_list
    possible_words = {}
    possible_words = set(all_words["words"])
    possible_words_list = possible_words
    non_letters = []
    combined_possibilities = []
    letters_in_position = {}
    letters_not_in_position = {}

def best_first_word():
    global guess, avg_second_possible_words , total_words_second, non_letters, letters_in_position
    global letters_not_in_position, combined_possibilities, possible_words_list, total_words_second, answer
    avg_second_possible_words = {}
    reset()
    for word in all_words["words"]:
        guess = [*word]
        total_words_second = []
        for answer in possible_answers:
            answer = [*answer]
            reset()
            refine_guess()
            possible_words_refine()
            total_words = len(possible_words_list)
            total_words_second.append(total_words)
            if ''.join(answer) == possible_answers[2308]:
                avg_second_possible_words[(''.join(guess))] = mean(total_words_second)
    print(avg_second_possible_words)

initialize()

best_first_word()

import timeit

def best_first_word_benchmark():
    global guess, avg_second_possible_words, answer
    avg_second_possible_words = {}
    reset()
    for word in all_words["words"][:1]:
        guess = [*word]
        total_words_second = []
        for answers in possible_answers:
            answer = [*answers]
            reset()
            refine_guess()
            possible_words_refine()
            total_words_second.append(len(possible_words_list))
            if answers == 'zonal':
                avg_second_possible_words[word] = mean(total_words_second)
    print(avg_second_possible_words)

num_runs = 4
duration = timeit.Timer(best_first_word_benchmark).timeit(number=num_runs)
avg_duration_in_hours = duration/num_runs*len(all_words["words"])/60/60
print(avg_duration_in_hours)
